{"ast":null,"code":"import{namehash}from'@ethersproject/hash';import{useMemo}from'react';import{useSingleCallResult}from'../state/multicall/hooks';import{isAddress}from'../utils';import isZero from'../utils/isZero';import{useENSRegistrarContract,useENSResolverContract}from'./useContract';import useDebounce from'./useDebounce';import useENSAddress from'./useENSAddress';/**\n * Does a reverse lookup for an address to find its ENS name.\n * Note this is not the same as looking up an ENS name to find an address.\n */export default function useENSName(address){var _resolverAddress$resu,_nameCallRes$result;var debouncedAddress=useDebounce(address,200);var ensNodeArgument=useMemo(function(){if(!debouncedAddress||!isAddress(debouncedAddress))return[undefined];return[namehash(\"\".concat(debouncedAddress.toLowerCase().substr(2),\".addr.reverse\"))];},[debouncedAddress]);var registrarContract=useENSRegistrarContract(false);var resolverAddress=useSingleCallResult(registrarContract,'resolver',ensNodeArgument);var resolverAddressResult=(_resolverAddress$resu=resolverAddress.result)===null||_resolverAddress$resu===void 0?void 0:_resolverAddress$resu[0];var resolverContract=useENSResolverContract(resolverAddressResult&&!isZero(resolverAddressResult)?resolverAddressResult:undefined,false);var nameCallRes=useSingleCallResult(resolverContract,'name',ensNodeArgument);var name=(_nameCallRes$result=nameCallRes.result)===null||_nameCallRes$result===void 0?void 0:_nameCallRes$result[0];/* ENS does not enforce that an address owns a .eth domain before setting it as a reverse proxy \n     and recommends that you perform a match on the forward resolution\n     see: https://docs.ens.domains/dapp-developer-guide/resolving-names#reverse-resolution\n  */var fwdAddr=useENSAddress(name);var checkedName=address===(fwdAddr===null||fwdAddr===void 0?void 0:fwdAddr.address)?name:null;var changed=debouncedAddress!==address;return useMemo(function(){return{ENSName:changed?null:checkedName,loading:changed||resolverAddress.loading||nameCallRes.loading};},[changed,nameCallRes.loading,checkedName,resolverAddress.loading]);}","map":{"version":3,"sources":["/Users/safahi/Downloads/interface-main/src/hooks/useENSName.ts"],"names":["namehash","useMemo","useSingleCallResult","isAddress","isZero","useENSRegistrarContract","useENSResolverContract","useDebounce","useENSAddress","useENSName","address","debouncedAddress","ensNodeArgument","undefined","toLowerCase","substr","registrarContract","resolverAddress","resolverAddressResult","result","resolverContract","nameCallRes","name","fwdAddr","checkedName","changed","ENSName","loading"],"mappings":"AAAA,OAASA,QAAT,KAAyB,qBAAzB,CACA,OAASC,OAAT,KAAwB,OAAxB,CAEA,OAASC,mBAAT,KAAoC,0BAApC,CACA,OAASC,SAAT,KAA0B,UAA1B,CACA,MAAOC,CAAAA,MAAP,KAAmB,iBAAnB,CACA,OAASC,uBAAT,CAAkCC,sBAAlC,KAAgE,eAAhE,CACA,MAAOC,CAAAA,WAAP,KAAwB,eAAxB,CACA,MAAOC,CAAAA,aAAP,KAA0B,iBAA1B,CAEA;AACA;AACA;AACA,GACA,cAAe,SAASC,CAAAA,UAAT,CAAoBC,OAApB,CAAoF,+CACjG,GAAMC,CAAAA,gBAAgB,CAAGJ,WAAW,CAACG,OAAD,CAAU,GAAV,CAApC,CACA,GAAME,CAAAA,eAAe,CAAGX,OAAO,CAAC,UAAM,CACpC,GAAI,CAACU,gBAAD,EAAqB,CAACR,SAAS,CAACQ,gBAAD,CAAnC,CAAuD,MAAO,CAACE,SAAD,CAAP,CACvD,MAAO,CAACb,QAAQ,WAAIW,gBAAgB,CAACG,WAAjB,GAA+BC,MAA/B,CAAsC,CAAtC,CAAJ,kBAAT,CAAP,CACD,CAH8B,CAG5B,CAACJ,gBAAD,CAH4B,CAA/B,CAIA,GAAMK,CAAAA,iBAAiB,CAAGX,uBAAuB,CAAC,KAAD,CAAjD,CACA,GAAMY,CAAAA,eAAe,CAAGf,mBAAmB,CAACc,iBAAD,CAAoB,UAApB,CAAgCJ,eAAhC,CAA3C,CACA,GAAMM,CAAAA,qBAAqB,wBAAGD,eAAe,CAACE,MAAnB,gDAAG,sBAAyB,CAAzB,CAA9B,CACA,GAAMC,CAAAA,gBAAgB,CAAGd,sBAAsB,CAC7CY,qBAAqB,EAAI,CAACd,MAAM,CAACc,qBAAD,CAAhC,CAA0DA,qBAA1D,CAAkFL,SADrC,CAE7C,KAF6C,CAA/C,CAIA,GAAMQ,CAAAA,WAAW,CAAGnB,mBAAmB,CAACkB,gBAAD,CAAmB,MAAnB,CAA2BR,eAA3B,CAAvC,CACA,GAAMU,CAAAA,IAAI,sBAAGD,WAAW,CAACF,MAAf,8CAAG,oBAAqB,CAArB,CAAb,CAEA;AACF;AACA;AACA,IACE,GAAMI,CAAAA,OAAO,CAAGf,aAAa,CAACc,IAAD,CAA7B,CACA,GAAME,CAAAA,WAAW,CAAGd,OAAO,IAAKa,OAAL,SAAKA,OAAL,iBAAKA,OAAO,CAAEb,OAAd,CAAP,CAA+BY,IAA/B,CAAsC,IAA1D,CAEA,GAAMG,CAAAA,OAAO,CAAGd,gBAAgB,GAAKD,OAArC,CACA,MAAOT,CAAAA,OAAO,CACZ,iBAAO,CACLyB,OAAO,CAAED,OAAO,CAAG,IAAH,CAAUD,WADrB,CAELG,OAAO,CAAEF,OAAO,EAAIR,eAAe,CAACU,OAA3B,EAAsCN,WAAW,CAACM,OAFtD,CAAP,EADY,CAKZ,CAACF,OAAD,CAAUJ,WAAW,CAACM,OAAtB,CAA+BH,WAA/B,CAA4CP,eAAe,CAACU,OAA5D,CALY,CAAd,CAOD","sourcesContent":["import { namehash } from '@ethersproject/hash'\nimport { useMemo } from 'react'\n\nimport { useSingleCallResult } from '../state/multicall/hooks'\nimport { isAddress } from '../utils'\nimport isZero from '../utils/isZero'\nimport { useENSRegistrarContract, useENSResolverContract } from './useContract'\nimport useDebounce from './useDebounce'\nimport useENSAddress from './useENSAddress'\n\n/**\n * Does a reverse lookup for an address to find its ENS name.\n * Note this is not the same as looking up an ENS name to find an address.\n */\nexport default function useENSName(address?: string): { ENSName: string | null; loading: boolean } {\n  const debouncedAddress = useDebounce(address, 200)\n  const ensNodeArgument = useMemo(() => {\n    if (!debouncedAddress || !isAddress(debouncedAddress)) return [undefined]\n    return [namehash(`${debouncedAddress.toLowerCase().substr(2)}.addr.reverse`)]\n  }, [debouncedAddress])\n  const registrarContract = useENSRegistrarContract(false)\n  const resolverAddress = useSingleCallResult(registrarContract, 'resolver', ensNodeArgument)\n  const resolverAddressResult = resolverAddress.result?.[0]\n  const resolverContract = useENSResolverContract(\n    resolverAddressResult && !isZero(resolverAddressResult) ? resolverAddressResult : undefined,\n    false\n  )\n  const nameCallRes = useSingleCallResult(resolverContract, 'name', ensNodeArgument)\n  const name = nameCallRes.result?.[0]\n\n  /* ENS does not enforce that an address owns a .eth domain before setting it as a reverse proxy \n     and recommends that you perform a match on the forward resolution\n     see: https://docs.ens.domains/dapp-developer-guide/resolving-names#reverse-resolution\n  */\n  const fwdAddr = useENSAddress(name)\n  const checkedName = address === fwdAddr?.address ? name : null\n\n  const changed = debouncedAddress !== address\n  return useMemo(\n    () => ({\n      ENSName: changed ? null : checkedName,\n      loading: changed || resolverAddress.loading || nameCallRes.loading,\n    }),\n    [changed, nameCallRes.loading, checkedName, resolverAddress.loading]\n  )\n}\n"]},"metadata":{},"sourceType":"module"}